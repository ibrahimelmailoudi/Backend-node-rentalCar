// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(auto()) @map("_id") @db.ObjectId
  email                   String           @unique
  password                String
  firstName               String
  lastName                String
  isAdmin                 Boolean          @default(false)
  isNormalUser            Boolean          @default(true)
  emailVerified           Boolean          @default(false)
  isActive                Boolean          @default(true)
  createdAt               DateTime         @default(now())
  balance                 Int?             @default(0)
  lastLogin               DateTime?
  // Other optional fields
  username                String?
  gender                  String?
  dateOfBirth             DateTime?
  driverLicenseNumber     String?
  driverLicenseExpiryDate DateTime?
  address                 String?
  phoneNumber             String?
  avatar                  String?
  subscriptionPlan        String?
  accountType             String?
  paymentMethods          String?
  cardNumber              String?
  paymentCard             String?
  cardSecureNumber        String?
  paymentMethod           String?
  notificationsEnabled    Boolean?
  profileBio              String?
  notifications           String?
  rentalPreferences       String?
  loyaltyPoints           Int?
  socialMediaHandles      String?
  securityQuestions       String?
  emergencyContact        String?
  driverLicenseImage      String?
  cardUserIdentifierImage String?
  userPhoto               String?
  SavedLocation           SavedLocation[]
  FavoriteCar             FavoriteCar[]
  RecentBooking           RecentBooking[]
  BookingHistory          BookingHistory[]
  Reservation             Reservation[]
  Transaction             Transaction[]
  Review                  Review[]
  Notification            Notification[]
  PaymentMethod           PaymentMethod[]
  AdminPermission         AdminPermission? @relation(fields: [adminPermissionId], references: [id])
  adminPermissionId       String?          @db.ObjectId
}

// SavedLocation model
model SavedLocation {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  userId   String @db.ObjectId
  location String
}

// FavoriteCar model
model FavoriteCar {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  user      User   @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
  car       Car    @relation(fields: [carId], references: [id])
  carId     String @db.ObjectId
  carNumber String // Matricule number or registration number of the car
}

// RecentBooking model
model RecentBooking {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  booking String
}

// BookingHistory model
model BookingHistory {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  booking String
}

// AdminPermission model
model AdminPermission {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique // Name of the admin permission
  description String? // Description of the admin permission (optional)
  Badge       String? // Badge of the admin permission ( Full : CRUD --- Hafl :CR --- None:0 )
  users       User[] // Users who have this permission
}

// Car model
model Car {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  matriculeNumber String        @unique // Matricule number of the car
  make            String // Make of the car (e.g., Toyota, Honda)
  model           String // Model of the car (e.g., Camry, Civic)
  year            Int // Year of the car's manufacture
  color           String // Color of the car
  mileage         Float // Mileage of the car
  price           Float // Price of the car
  description     String? // Description of the car (optional)
  imageUrl        String? // URL or file path to the car's image (optional)
  isAvailable     Boolean       @default(true) // Availability status of the car
  isTop           Boolean       @default(false) // Indicates if the car is a top choice
  isRecommended   Boolean       @default(false) // Indicates if the car is recommended
  isNew           Boolean       @default(false) // Indicates if the car is new
  createdAt       DateTime      @default(now())
  FavoriteCar     FavoriteCar[]
  Reservation     Reservation[]
  Review          Review[]
  Maintenance     Maintenance[]
}

// Reservation model
model Reservation {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  car         Car           @relation(fields: [carId], references: [id])
  carId       String        @db.ObjectId
  startDate   DateTime
  endDate     DateTime
  status      String
  totalAmount Float
  Transaction Transaction[]
}

// Transaction model
model Transaction {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String      @db.ObjectId
  amount        Float
  status        String
  paymentMethod String
}

// Review model
model Review {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @db.ObjectId
  car     Car     @relation(fields: [carId], references: [id])
  carId   String  @db.ObjectId
  rating  Int
  comment String?
}

// Promotion model
model Promotion {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  discount Float
}

// Feedback model
model Feedback {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  comment String
}

// Invoice model
model Invoice {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  amount Float
  status String
}

// Maintenance model
model Maintenance {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  car         Car      @relation(fields: [carId], references: [id])
  carId       String   @db.ObjectId
  startDate   DateTime
  endDate     DateTime
  description String
}

// Discount model
model Discount {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  percentage Float
}

// Category model
model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
}

// Notification model
model Notification {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @db.ObjectId
  message String
  isRead  Boolean @default(false)
}

// InsuranceType model
model InsuranceType {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  Insurance Insurance[]
}

// Insurance model Exemples :
//Liability Insurance
// Collision Insurance
// Comprehensive Insurance
// Personal Injury Protection (PIP)
// Uninsured/Underinsured Motorist Coverage
// Gap Insurance
// Medical Payments (MedPay) Coverage
// Rental Reimbursement Coverage
// Towing and Labor Coverage
// Roadside Assistance Coverage
model Insurance {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  coverage        String
  type            InsuranceType @relation(fields: [insuranceTypeId], references: [id])
  insuranceTypeId String        @db.ObjectId
}

// PaymentMethodType model
model PaymentMethodType {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  PaymentMethod PaymentMethod[]
}

// PaymentMethod model
model PaymentMethod {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  user                User              @relation(fields: [userId], references: [id])
  userId              String            @db.ObjectId
  type                PaymentMethodType @relation(fields: [paymentMethodTypeId], references: [id])
  accountNumber       String?
  paymentMethodTypeId String            @db.ObjectId
}
